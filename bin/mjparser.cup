 
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.*;

parser code {:
	
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}


init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info("skener ocitao " + s.toString() + " " + s.value.toString());
	return s;
:}

 
terminal String IDENT; 

terminal MUL, DIV, MOD, ASSMUL, ASSDIV, ASSMOD;
nonterminal Mulop;
 
terminal PLUS, MINUS, ASSADD, ASSSUB;
nonterminal Addop;

terminal EQUAL, DIFF, GRT, GEQ, LESS, LEQ;	
nonterminal Relop;

terminal ASSIGN; 

 
terminal LBRACKET, RBRACKET, PT; 

terminal NEW, LPAREN, RPAREN;
terminal Integer NUM_CONST, BOOL_CONST;
terminal Character CHAR_CONST;


terminal AND;
terminal OR;


terminal COMMA;

terminal INC, DEC;

terminal IF, ELSE, FOR, BREAK, CONTINUE, RETURN, READ, PRINT, LBRACE, RBRACE, SEMI;
nonterminal Statement, OptionalNumConst, MultipleStatements;


nonterminal FormPars, OptArray, FormParItem, ParameterList;

terminal VOID, ABSTRACT;
nonterminal OptFormPars;

nonterminal MultipleVarsDecl, VarDecl;


terminal EXTENDS, CLASS;
nonterminal MethodDeclList;

nonterminal OptMet;


nonterminal VarDeclList;

nonterminal OptActPars;

terminal CONST;

terminal PROG;
nonterminal DeclList, DeclItem;


nonterminal rs.etf.pp1.symboltable.concepts.Obj MulopLeft, MulopRight, AddopLeft, AddopRight;

nonterminal MethodDecl, FactorExprBegin;

nonterminal rs.etf.pp1.symboltable.concepts.Obj  Program, ProgName, VarItem, MethodTypeName, 
										MethodVoidName, Assignop, AssignopRight, Designator
												; 



nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expression, ExpressionList, Expressions, Term, Factor, 
				DesignatorStatement, ConstDecl, ConstDeclList,  ConstItem,
								Fact, Initializer, ActPars, TermList
											;

/*************************PROG************************/			 
Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE
					;
					
ProgName ::= (ProgName) IDENT:progName
					;
 
 
DeclList ::= (AllDeclLists) DeclList DeclItem
					|
					(NoDecl) /*epsilon*/
			 		;
			 		
DeclItem ::= (ConstDeclaration) ConstDecl
					|
	   				(VarDeclaration) VarDecl
	    			;

	    			
/************************ConstDecl***********************/	 
ConstDecl ::= (ConstDeclarations) CONST Type:constType ConstDeclList SEMI
					|    
					(ConstDeclarationError) CONST error:e SEMI
                          {:
                              parser.report_error("Uspesan oporavak od greske na liniji " + eleft +
                                   " pri definisanju konstante do ;", null);
                          :};

ConstDeclList ::= (MultipleConst) ConstDeclList COMMA ConstItem
					|
				  (SingleConst) ConstItem
				  	;

ConstItem ::= (ConstItem) IDENT:constName ASSIGN Initializer
					;

Initializer ::= (InitNum) NUM_CONST:value
					|
				(InitChar) CHAR_CONST:value
					|
				(InitBool) BOOL_CONST:value
					;

/************************VarDecl***********************/	 

VarDecl ::= (VarDeclarations) Type:varType VarDeclList SEMI
					|
					Type error:e
					{: parser.report_error("Izvrsen oporavak do ; u deklaraciji promenljive u liniji "+eleft+"!", null); :}
					SEMI
					;

VarDeclList ::= (MultipleVar) VarDeclList COMMA VarItem
					|
				(SingleVar) VarItem
					|
				error:e
				{: parser.report_error("Izvrsen oporavak do ; u deklaraciji promenljive!", null);:}
				COMMA VarItem;
				
VarItem ::= (VarItem) IDENT:varName OptArray
					;
		 					

	
/*************************MethodDecl************************/

MultipleVarsDecl ::= (MultipleVarDec) MultipleVarsDecl VarDecl
				|
				(NoVars) /*epsilon*/
				;
							
MethodDecl ::= (TypeMethodDecl) MethodTypeName LPAREN OptFormPars RPAREN MultipleVarsDecl LBRACE MultipleStatements RBRACE
				|
				(VoidMethodDecl) MethodVoidName LPAREN OptFormPars RPAREN MultipleVarsDecl LBRACE MultipleStatements RBRACE
				;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methodName
				;

MethodVoidName ::= (MethodVoidName) VOID IDENT:methName;
			   	
OptFormPars ::= (OptFp) FormPars
			|
			(NoFormPars) /*epsilon*/
			;
			
MethodDeclList ::= (Mdl) MethodDeclList MethodDecl
							|
							(NoMEt) /*epsilon*/
		 					;

/*********************FormPars********************/
FormPars ::= (FormalPar) ParameterList;

ParameterList ::= (MultipleFormPars) ParameterList COMMA FormParItem
				|
			 (SingleFormPar) FormParItem
				 ;
 
OptArray ::= (Brackets) LBRACKET RBRACKET
				|
				(NoBrackets) /*epsilon*/
				;
				
FormParItem ::= (FormParItem) Type IDENT:formParName OptArray
				;

/***********************Type**********************/
Type ::= (Type) IDENT:typeName
				;

/*********************Statement********************/
Statement ::=  (DesignatorStat) DesignatorStatement SEMI
				|
			  (ReadStat) READ LPAREN Designator RPAREN SEMI
			  	|
			  (PrintStat) PRINT LPAREN Expression OptionalNumConst RPAREN SEMI
			  	|
			  	(ReturnStat) RETURN SEMI
				|
				(ReturnExprStat) RETURN Expression SEMI
			  ;

MultipleStatements ::= (MultiStat) MultipleStatements Statement
				|
				(NoStats) /*epsilon*/
				;			  	
			  	

OptionalNumConst ::= (OptNumConst) COMMA NUM_CONST
				|
			  (NoNumConst) /*epsilon*/
			  	;

/*********************DesignatorStatement********************/
DesignatorStatement ::= (DessInc) Designator INC
					|
					(DessDec) Designator DEC
					|
					(DesignatorAssignop) Designator Assignop Expression
					|
					(DesignatorAssignopRight) Designator AssignopRight Expression
					|
					(DesignatorMethodCall) Designator LPAREN RPAREN
					|
//					(DesignatorActPars) Designator LPAREN ActPars RPAREN
//					|
		   (ErrorDess) Designator Assignop error:e
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + eleft+" u dodeli vrednosti ", null);  :} 
					;



OptActPars ::= (OptActualPars) ActPars
				|
				(NoActualPars) /*epsilon*/
				;	
	
/**************************ActPars*************************/
ActPars ::= (ActParsSimple) Expression 
			|
			(ActParsMultiple) ActPars COMMA Expression
			;

/*************************Expression*************************/
ExpressionList ::= (ExprTerm) Term:t 
					|
					(ExprTermAddopLeft) Term:t AddopLeft ExpressionList:te
					|
					(ExprTermAddopRight) Term:t AddopRight ExpressionList:te
					;
			
Expressions ::= (NegExpr) MINUS ExpressionList
				|
				(Expr) ExpressionList
				;
			
Expression ::= (Expression) Expressions;	
/***************************Term*****************************/	
Term ::= (Term) TermList;

TermList ::= (MulopLeftFactor) Fact MulopLeft TermList
				|
				(MulopRightFact) Fact MulopRight TermList
				|
				(JustFactor) Factor
				;
				
Fact ::= (Fact) Factor;

/*************************Factor***************************/
Factor ::= (Df) Designator 
				|
				(NumConst) NUM_CONST 
				|
				(CharConst) CHAR_CONST
				|
				(BoolConst) BOOL_CONST
				|
				(NewType) NEW Type 
				|
				(NewTypeExpr) NEW Type LBRACKET Expression RBRACKET
				|
				(PExpr) FactorExprBegin Expression RPAREN
				|
				(FuncCall) Designator:func LPAREN ActPars RPAREN
				|
				(FuncCallNoPrs) Designator:func LPAREN RPAREN
				;
				
FactorExprBegin ::=(FactorExprBegin) LPAREN; 			

/*************************Designator***************************/
Designator ::= (SimpleDes) IDENT:desName
				|
				(DesArr) Designator LBRACKET Expression:index RBRACKET
			    ;
		
				
/*************************AssignOp***************************/
Assignop ::= (Assign) ASSIGN 
				;
				
AssignopRight ::= (AssignAddRight) AddopRight
				|
				(AssignMulRight) MulopRight
				;
				
/*************************AddOp***************************/
AddopLeft::= (Add) PLUS
				|
				(Sub) MINUS
				;

AddopRight ::= (AssAdd) ASSADD
				|
				(AssSub) ASSSUB	
				;

Addop ::= (AddLeft) AddopLeft
				|
				(AddRight) AddopRight		
				;
/*************************MulOp***************************/
MulopLeft ::= (Mul) MUL
				|
				(Div) DIV
				|
				(Mod) MOD
				;
				
MulopRight ::= (AssMul) ASSMUL
				|
				(AssDiv) ASSDIV
				|
				(AssMod) ASSMOD
				;


Mulop ::= (MulLeft) MulopLeft
			|
			(MulRight) MulopRight
			;
			 	
				


